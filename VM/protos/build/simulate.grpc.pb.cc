// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simulate.proto

#include "simulate.pb.h"
#include "simulate.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace virtualmachine {

static const char* Simulator_method_names[] = {
  "/virtualmachine.Simulator/simulate",
};

std::unique_ptr< Simulator::Stub> Simulator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Simulator::Stub> stub(new Simulator::Stub(channel));
  return stub;
}

Simulator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_simulate_(Simulator_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Simulator::Stub::simulate(::grpc::ClientContext* context, const ::virtualmachine::SimulateRequest& request, ::virtualmachine::SimulateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_simulate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::virtualmachine::SimulateReply>* Simulator::Stub::AsyncsimulateRaw(::grpc::ClientContext* context, const ::virtualmachine::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::virtualmachine::SimulateReply>::Create(channel_.get(), cq, rpcmethod_simulate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::virtualmachine::SimulateReply>* Simulator::Stub::PrepareAsyncsimulateRaw(::grpc::ClientContext* context, const ::virtualmachine::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::virtualmachine::SimulateReply>::Create(channel_.get(), cq, rpcmethod_simulate_, context, request, false);
}

Simulator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Simulator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Simulator::Service, ::virtualmachine::SimulateRequest, ::virtualmachine::SimulateReply>(
          std::mem_fn(&Simulator::Service::simulate), this)));
}

Simulator::Service::~Service() {
}

::grpc::Status Simulator::Service::simulate(::grpc::ServerContext* context, const ::virtualmachine::SimulateRequest* request, ::virtualmachine::SimulateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace virtualmachine

